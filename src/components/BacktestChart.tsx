import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  ReferenceLine,
  ScatterChart,
  Scatter,
  AreaChart,
  Area
} from 'recharts';
import { BacktestResult } from '@/lib/backtesting';
import { TrendingUp, BarChart3, Activity, DollarSign } from 'lucide-react';

interface BacktestChartProps {
  result: BacktestResult;
  symbol: string;
}

export const BacktestChart: React.FC<BacktestChartProps> = ({ result, symbol }) => {
  const [chartType, setChartType] = useState<'portfolio' | 'signals' | 'drawdown' | 'trades'>('portfolio');

  const formatCurrency = (value: number) => {
    if (value >= 1000000) {
      return `$${(value / 1000000).toFixed(1)}M`;
    } else if (value >= 1000) {
      return `$${(value / 1000).toFixed(1)}K`;
    }
    return `$${value.toFixed(0)}`;
  };

  const formatPercent = (value: number) => `${(value * 100).toFixed(1)}%`;
  const formatDate = (dateStr: string) => new Date(dateStr).toLocaleDateString();

  // Prepare chart data
  const portfolioData = result.portfolioValues.map((pv, index) => ({
    date: pv.date,
    value: pv.value,
    drawdown: pv.drawdown * 100,
    index
  }));

  const signalData = result.signals.map((signal, index) => ({
    date: signal.date,
    price: signal.price,
    signal: signal.signal,
    index
  }));

  const tradeData = result.trades.map((trade, index) => ({
    date: trade.timestamp,
    price: trade.price,
    type: trade.type,
    quantity: trade.quantity,
    value: trade.price * trade.quantity,
    index
  }));

  const buyTrades = tradeData.filter(t => t.type === 'BUY');
  const sellTrades = tradeData.filter(t => t.type === 'SELL');

  return (
    <div className="space-y-6">
      {/* Chart Controls */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BarChart3 className="h-5 w-5" />
            Backtest Visualization
          </CardTitle>
          <CardDescription>
            Analyze strategy performance across different metrics
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-2">
            <Button
              variant={chartType === 'portfolio' ? "default" : "outline"}
              size="sm"
              onClick={() => setChartType('portfolio')}
            >
              <TrendingUp className="h-4 w-4 mr-1" />
              Portfolio Value
            </Button>
            <Button
              variant={chartType === 'signals' ? "default" : "outline"}
              size="sm"
              onClick={() => setChartType('signals')}
            >
              <Activity className="h-4 w-4 mr-1" />
              Trading Signals
            </Button>
            <Button
              variant={chartType === 'drawdown' ? "default" : "outline"}
              size="sm"
              onClick={() => setChartType('drawdown')}
            >
              <BarChart3 className="h-4 w-4 mr-1" />
              Drawdown
            </Button>
            <Button
              variant={chartType === 'trades' ? "default" : "outline"}
              size="sm"
              onClick={() => setChartType('trades')}
            >
              <DollarSign className="h-4 w-4 mr-1" />
              Trade Points
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Chart Display */}
      <Card>
        <CardHeader>
          <CardTitle>
            {chartType === 'portfolio' && 'Portfolio Value Over Time'}
            {chartType === 'signals' && 'Trading Signals'}
            {chartType === 'drawdown' && 'Portfolio Drawdown'}
            {chartType === 'trades' && 'Trade Execution Points'}
          </CardTitle>
          <CardDescription>
            {chartType === 'portfolio' && `Portfolio performance for ${symbol}`}
            {chartType === 'signals' && `Buy/Sell signals generated by strategy`}
            {chartType === 'drawdown' && `Maximum drawdown periods`}
            {chartType === 'trades' && `Actual trade entry and exit points`}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="h-[500px]">
            <ResponsiveContainer width="100%" height="100%">
              <>
                {chartType === 'portfolio' && (
                  <LineChart data={portfolioData}>
                    <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
                    <XAxis 
                      dataKey="date" 
                      tickFormatter={formatDate}
                      stroke="hsl(var(--muted-foreground))"
                    />
                    <YAxis 
                      tickFormatter={formatCurrency}
                      stroke="hsl(var(--muted-foreground))"
                    />
                    <Tooltip
                      formatter={(value: number) => [formatCurrency(value), 'Portfolio Value']}
                      labelFormatter={(date: string) => formatDate(date)}
                      contentStyle={{
                        backgroundColor: 'hsl(var(--card))',
                        border: '1px solid hsl(var(--border))',
                        borderRadius: '6px'
                      }}
                    />
                    
                    <ReferenceLine 
                      y={result.portfolioValues[0].value} 
                      stroke="hsl(var(--muted-foreground))" 
                      strokeDasharray="5 5"
                      label="Initial Value"
                    />

                    <Line
                      type="monotone"
                      dataKey="value"
                      stroke="hsl(var(--primary))"
                      strokeWidth={2}
                      dot={false}
                      name="Portfolio Value"
                    />
                  </LineChart>
                )}

                {chartType === 'signals' && (
                  <ScatterChart data={signalData}>
                    <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
                    <XAxis 
                      dataKey="index" 
                      type="number"
                      domain={['dataMin', 'dataMax']}
                      stroke="hsl(var(--muted-foreground))"
                      label={{ value: 'Time', position: 'insideBottom', offset: -5 }}
                    />
                    <YAxis 
                      dataKey="price"
                      tickFormatter={formatCurrency}
                      stroke="hsl(var(--muted-foreground))"
                    />
                    <Tooltip
                      formatter={(value: number, name: string) => {
                        if (name === 'price') return [formatCurrency(value), 'Price'];
                        return [value, name];
                      }}
                      contentStyle={{
                        backgroundColor: 'hsl(var(--card))',
                        border: '1px solid hsl(var(--border))',
                        borderRadius: '6px'
                      }}
                    />

                    <Scatter
                      dataKey="price"
                      fill="hsl(var(--muted-foreground))"
                      fillOpacity={0.3}
                      stroke="hsl(var(--muted-foreground))"
                      strokeWidth={1}
                    />
                  </ScatterChart>
                )}

                {chartType === 'drawdown' && (
                  <AreaChart data={portfolioData}>
                    <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
                    <XAxis 
                      dataKey="date" 
                      tickFormatter={formatDate}
                      stroke="hsl(var(--muted-foreground))"
                    />
                    <YAxis 
                      tickFormatter={(value) => `${value.toFixed(1)}%`}
                      stroke="hsl(var(--muted-foreground))"
                    />
                    <Tooltip
                      formatter={(value: number) => [`${value.toFixed(2)}%`, 'Drawdown']}
                      labelFormatter={(date: string) => formatDate(date)}
                      contentStyle={{
                        backgroundColor: 'hsl(var(--card))',
                        border: '1px solid hsl(var(--border))',
                        borderRadius: '6px'
                      }}
                    />

                    <Area
                      type="monotone"
                      dataKey="drawdown"
                      stroke="hsl(var(--destructive))"
                      fill="hsl(var(--destructive) / 0.2)"
                      strokeWidth={2}
                    />
                  </AreaChart>
                )}

                {chartType === 'trades' && (
                  <ScatterChart data={signalData}>
                    <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
                    <XAxis 
                      dataKey="index" 
                      type="number"
                      domain={['dataMin', 'dataMax']}
                      stroke="hsl(var(--muted-foreground))"
                    />
                    <YAxis 
                      dataKey="price"
                      tickFormatter={formatCurrency}
                      stroke="hsl(var(--muted-foreground))"
                    />
                    <Tooltip
                      formatter={(value: number, name: string) => {
                        if (name === 'price') return [formatCurrency(value), 'Price'];
                        return [value, name];
                      }}
                      contentStyle={{
                        backgroundColor: 'hsl(var(--card))',
                        border: '1px solid hsl(var(--border))',
                        borderRadius: '6px'
                      }}
                    />

                    <Scatter
                      dataKey="price"
                      fill="hsl(var(--muted-foreground))"
                      fillOpacity={0.3}
                      stroke="hsl(var(--muted-foreground))"
                      strokeWidth={1}
                    />

                    <Scatter
                      data={buyTrades}
                      dataKey="price"
                      fill="hsl(var(--success))"
                      stroke="hsl(var(--success))"
                      strokeWidth={2}
                      name="Buy"
                    />

                    <Scatter
                      data={sellTrades}
                      dataKey="price"
                      fill="hsl(var(--destructive))"
                      stroke="hsl(var(--destructive))"
                      strokeWidth={2}
                      name="Sell"
                    />
                  </ScatterChart>
                )}
              </>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>

      {/* Quick Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Total Return</p>
              <p className={`text-lg font-bold ${result.performance.totalReturn >= 0 ? 'text-success' : 'text-destructive'}`}>
                {formatPercent(result.performance.totalReturn)}
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Sharpe Ratio</p>
              <p className="text-lg font-bold">
                {result.performance.sharpeRatio.toFixed(2)}
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Max Drawdown</p>
              <p className="text-lg font-bold text-destructive">
                {formatPercent(result.performance.maxDrawdown)}
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">Win Rate</p>
              <p className="text-lg font-bold">
                {formatPercent(result.performance.winRate)}
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};